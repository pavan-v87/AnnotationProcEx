apply plugin: 'com.android.application'

def dir = "$project.buildDir\\generated\\source\\apt"

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    sourceSets {
        main {
            java.srcDirs += dir
        }
    }


    defaultConfig {
        applicationId "com.example.annotationprocex"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

//def annotationDirs = "F:\\Samples\\AnnotationProcEx\\app\\src\\main\\java"

afterEvaluate {

    project ->
    android.applicationVariants.each { variant ->
        variant.javaCompile.options.compilerArgs += [
                '-s',dir
        ]
    }
}

task printInfo() {
    println("+++++++ BUILD dir :"+dir)
    def folder = new File(dir)

    // If it exist
    if(folder.exists()) {
        folder.delete()
    }
    folder.mkdir();
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn printInfo
}
/*
tasks.withType(JavaCompile) {
    options.compilerArgs << '-s \"src/java/main/generated\"'
}
*/

configurations {
    checkerFrameworkJavac {
        description = 'a customization of the OpenJDK javac compiler with additional support for type annotations'
    }
    checkerFrameworkAnnotatedJDK {
        description = 'a copy of JDK classes with Checker Framework type qualifers inserted'
    }
    checkerFramework {
        description = 'The Checker Framework: custom pluggable types for Java'
    }
}

def typecheck = project.properties['typecheck'] ?: false
allprojects {
    if (typecheck) {
        gradle.projectsEvaluated {
            tasks.withType(JavaCompile).all { compile ->
                compile.options.compilerArgs = [
                        '-processor', 'org.checkerframework.checker.nullness.NullnessChecker',
                        '-processorpath', "${configurations.checkerFramework.asPath}",
                        // uncomment to turn Checker Framework errors into warnings
                        //'-Awarns',
                        "-Xbootclasspath/p:${configurations.checkerFrameworkAnnotatedJDK.asPath}"
                ]
                compile.options.compilerArgs += ['-source', '7', '-target', '7']
                options.bootClasspath = System.getProperty("sun.boot.class.path") + ":" + options.bootClasspath
                options.bootClasspath = "${configurations.checkerFrameworkJavac.asPath}:" + ":" + options.bootClasspath
                options.fork = true
                options.forkOptions.jvmArgs += ["-Xbootclasspath/p:${configurations.checkerFrameworkJavac.asPath}"]
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile project(':annotation-proc-lib')

    def checkerFrameworkVersion = '2.1.3'
    def jdkVersion = JavaVersion.current().isJava7() ? 'jdk7' : 'jdk8'
    checkerFrameworkAnnotatedJDK "org.checkerframework:${jdkVersion}:${checkerFrameworkVersion}"
    checkerFrameworkJavac "org.checkerframework:compiler:${checkerFrameworkVersion}"
    checkerFramework "org.checkerframework:checker:${checkerFrameworkVersion}"
    compile "org.checkerframework:checker-qual:${checkerFrameworkVersion}"
    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha9'
}